# -*- coding: utf-8 -*-
"""openai_whisper-large-v3-turbo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1veyz3RLq77ns7rkb2rWKP_BKml_en0SE
"""



!pip install transformers=='4.37.0'
!pip install pytorch=='2.1.0'

!pip install torch=='2.1.0'

!python --version

!sudo apt-get update -y
!sudo apt-get install python3.10

import torch
from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor, pipeline
#from datasets import load_dataset


device = "cuda:0" if torch.cuda.is_available() else "cpu"
torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32

model_id = "openai/whisper-large-v3-turbo"

model = AutoModelForSpeechSeq2Seq.from_pretrained(
    model_id, torch_dtype=torch_dtype, low_cpu_mem_usage=True
)
model.to(device)

processor = AutoProcessor.from_pretrained(model_id)

pipe = pipeline(
    "automatic-speech-recognition",
    model=model,
    tokenizer=processor.tokenizer,
    feature_extractor=processor.feature_extractor,
    chunk_length_s=30,
    batch_size=16,  # batch size for inference - set based on your device
    torch_dtype=torch_dtype,
    device=device,
)

#dataset = load_dataset("distil-whisper/librispeech_long", "clean", split="validation")
sample = "/content/resampled_audio.wav"

result = pipe(sample,generate_kwargs={"language": "hindi"})
print(result["text"])

sample = "/content/hindi_audio2.mp3"

result = pipe(sample,generate_kwargs={"language": "hindi"})
print(result["text"])

import os
import torch
import pandas as pd
from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor, pipeline

def setup_whisper():
    device = "cuda:0" if torch.cuda.is_available() else "cpu"
    torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32
    model_id = "openai/whisper-large-v3-turbo"

    model = AutoModelForSpeechSeq2Seq.from_pretrained(
        model_id, torch_dtype=torch_dtype, low_cpu_mem_usage=True
    ).to(device)

    processor = AutoProcessor.from_pretrained(model_id)

    return pipeline(
        "automatic-speech-recognition",
        model=model,
        tokenizer=processor.tokenizer,
        feature_extractor=processor.feature_extractor,
        chunk_length_s=30,
        batch_size=16,
        torch_dtype=torch_dtype,
        device=device,
    )

def transcribe_folder(input_folder, output_csv):
    pipe = setup_whisper()
    results = []

    for filename in os.listdir(input_folder):
        if filename.lower().endswith(('.wav', '.mp3')):
            try:
                filepath = os.path.join(input_folder, filename)
                transcription = pipe(filepath, generate_kwargs={"language": "hindi"})["text"]
                results.append({"filename": filename, "transcription": transcription})
                print(f"Transcribed: {filename}")
            except Exception as e:
                print(f"Error processing {filename}: {e}")

    pd.DataFrame(results).to_csv(output_csv, index=False, encoding='utf-8')
    print(f"Saved transcriptions to {output_csv}")

# Usage
input_folder = "/content/audio"
output_csv = "transcriptions.csv"
transcribe_folder(input_folder, output_csv)

